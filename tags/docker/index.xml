<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Yuantops&#39; Blog</title>
    <link>https://blog.yuantops.com/tags/docker/</link>
    <description>Recent content in Docker on Yuantops&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>yuan.tops@gmail.com (yuantops)</managingEditor>
    <webMaster>yuan.tops@gmail.com (yuantops)</webMaster>
    <copyright>All rights reserved.</copyright>
    <lastBuildDate>Mon, 12 Jan 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.yuantops.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>理解Docker -- Docker Official Docs翻译</title>
      <link>https://blog.yuantops.com/tech/understanding-docker/</link>
      <pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate>
      <author>yuan.tops@gmail.com (yuantops)</author>
      <guid>https://blog.yuantops.com/tech/understanding-docker/</guid>
      <description>Docker是什么 Docker是用于开发(develop)、转移(ship)、运行(run)程序(application)的一个开放平台。Docker的设计目的是为了更快地传递程序。在Docker的帮助下，你能将程序与硬件基础(infrastructure)隔离、把硬件基础看作一个可管理的程序。Docker能帮你更快地转移代码、测试代码、部署代码，缩短编写代码与运行代码之间的周期。
Docker将一种轻量级的容器虚拟化平台技术(container virtualization platform)与相应的工作流程和工具结合起来，从而能帮你管理、部署自己的程序。
在核心层面，Docker支持在一个容器(container)中安全(securely)、独立(isolated)地运行几乎任何一种程序。这种独立性、安全性允许你在主机(host)上同时运行多个容器。容器在运行时不需要分配额外负载给监视程序(hypervisor)，它的这种轻量级特性意味着你能更大限度地使用硬件资源。
基于容器虚拟化，Docker提供的工具和平台能帮助你：
 将你的程序(和支持的组件)放到Docker容器中
 分发(distribute)、转移(ship)这些容器给自己的团队成员，以便他们后续的开发和测试
 把这些程序部署到产品环境中，不管你的产品环境位于本地数据中心还是在云中
  我能用Docker做什么？ 更快地转移程序
Docker是帮你处理开发周期的绝好工具。Docker能允许开发者在包含你的程序和服务的本地容器上开发，然后它能整合到一个连续的整合、部署工作流程中。
举个例子。开发者在本地编写程序，通过Docker将开发环境与同事共享。当他们的工作完成时，开发者将他们的代码和开发环境推送到一个测试环境上，并且执行任何必要的测试。然后，你能从测试环境将Docker镜像(image)推送到产品，部署代码。
更方便地部署、扩展
Docker基于容器的平台支持高便携性(portable)的工作负载(workload)。Docker容器能运行在开发者的本地机器上、数据中心的物理/虚拟机器上，也能运行在云端。
支持更高密度，运行更多工作负载
Docker是轻量级的，而且很快。与基于监督程序(hypervisor)的虚拟机相比，它提供了可变的、低消耗的替代方案。在高密度(high density)的工作环境中，这一点就显得格外重要，例如：当搭建你自己的云或者Platform-as-a-service服务时。不止如此，当你想尽可能地利用你的资源来做小型/中型的部署时，Docker也同样有用。
Docker的主要组件有哪些？ Docker主要组件有两个：
 Docker: 开源的容器虚拟化平台 Docker Hub：Software-as-a-Service平台，用来分享、管理Docker容器
  注意：Docker受开源协议Apache 2.0约束
Docker的架构 Docker使用客户端-服务器架构。Docker客户端(client)与Docker守护进程(deamon)通信，后者来完成建立版本(build)、运行(run)、分发(distribute)Docker容器等工作。Docker客户端和守护进程*可以*同时运行在一个系统上；你也可以将Docker客户端连接到一个远程Docker守护进程。Docker客户端和Docker守护进程通过socket或者REST API通信。
Docker守护进程 如上图所示，Docker守护进程运行在一台宿主机器上。用户不直接与守护进程通信，而是通过客户端与之通信。
Docker客户端 Docker客户端，往往是二进制形式的docker程序，是Docker最主要的用户使用接口。它接收来自用户的命令，将它来回地与守护程序进行通信。
在Docker内部 为了理解Docker的内部原理，你需要理解三个组件：
 镜像(image)
 仓库(registry)
 容器(container)
  #镜像 镜像是一个只读(read-only)的模板。例如，一个镜像可能包含安装了Apache和你的Web服务器的一个Ubuntu操作系统。镜像是用来创造Docker容器的。通过Docker，你能以简单的方式创建新的镜像、更新现存的镜像，或者下载别人已经创建好了的镜像。Docker镜像是Docker的创建(build)组件。
仓库 仓库保存镜像。它们是你用来上传、下载镜像的私有/公有场所。官方的Docker仓库是Docker Hub，它提供了一个巨大的镜像仓库集以供你使用。你可以自己创建镜像，也可以使用别人事先已经建好了的镜像。Docker仓库是Docker的分发(distribute)组件。
容器 容器与目录类似。容器包含了运行一个程序所需要的所有东西。每个容器都是创建自一个镜像。容器可以被运行、启动、停止、移动、删除。每个容器都是一个隔离、安全的程序平台。Docker容器是Docker的运行(run)组件。
那么，Docker到底如何工作？ 现在，我们已经知道：
 你可以创建Docker镜像来保存程序
 你可以从Docker镜像中新建Docker容器来运行程序
 你可以通过Docker Hub或者自己的私有仓库来分享Docker镜像
  下面，让我们看看这些组件是如何协作起来使Docker工作的。</description>
    </item>
    
  </channel>
</rss>