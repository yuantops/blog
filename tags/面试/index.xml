<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试 on Yuantops&#39; Blog</title>
    <link>http://blog.yuantops.com/tags/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on Yuantops&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>yuan.tops@gmail.com (yuantops)</managingEditor>
    <webMaster>yuan.tops@gmail.com (yuantops)</webMaster>
    <copyright>All rights reserved.</copyright>
    <lastBuildDate>Thu, 17 Sep 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.yuantops.com/tags/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C语言堆与栈的区别</title>
      <link>http://blog.yuantops.com/tech/c-heap-vs-stack-memory/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
      <author>yuan.tops@gmail.com (yuantops)</author>
      <guid>http://blog.yuantops.com/tech/c-heap-vs-stack-memory/</guid>
      <description>C语言中动态区域由Stack和Heap两部分组成。简单说来，Stack由编译器自动分配释放，存放函数的参数值、局部变量等值，底层的数据结构是LIFO的栈。Heap由程序员分配释放，如果一不小心忘记了释放申请的内存，可能引起内存泄漏。Heap基于的数据结构比较复杂。
区别 申请方式 Stack由系统自动分配，存放局部变量等。 Heap由程序员调用malloc, realloc, calloc申请，并用free释放。
申请效率 Stack由系统自动分配，速度快，程序员无法控制。
Heap由程序员申请、释放，容易产生碎片，效率低于Stack。
空间大小 Stack在Linux内存区域中由高地值向低地址生长，大小固定，地址是连续的。当栈的剩余控件不足时，会提示Overflow。
Heap在内存区域中由低地址向高地址生长，是不连续的内存区域。堆的大小受制于系统有效的虚拟内存。
分配方式 Stack是连续的。只要栈的空间大于所申请的空间，系统将为程序分配空间，否则会报Overflow。
Heap收到程序申请时，操作系统有一个记录空闲内存地址的链表，会遍历该链表，寻找第一个空间大于所申请空间的堆节点，然后将该节点从空闲链表中删除，并将该节点的空间分配给程序。另外，如果找到的堆节点大小不一定正好等于申请的大小，系统会自动将多余的部分重新放入空闲链表中。反复的申请/释放，势必会生成大量的内存空间碎片，使程序效率降低。
存储内容 Stack：当函数调用时，第一个进栈的是主函数中下一条语句的地址，然后是函数的各个参数，参数是从右往左入栈的，然后是函数中的局部变量。静态变量不入栈。
当本次函数调用结束后，局部变量先出栈，然后是参数，最后是栈顶指针所指向的、主函数中的下一条指令，程序由该点继续执行。
Heap：往往会在堆的头部用一个字节存放堆的大小，以利于free函数的释放。</description>
    </item>
    
    <item>
      <title>Java堆内存与栈内存的区别</title>
      <link>http://blog.yuantops.com/tech/java-heap-vs-stack-memory/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
      <author>yuan.tops@gmail.com (yuantops)</author>
      <guid>http://blog.yuantops.com/tech/java-heap-vs-stack-memory/</guid>
      <description> Java中提供&amp;rdquo;栈&amp;rdquo;这种数据结构的实现，java.util.Stack。但此处我们所讨论的不是数据结构，而是JVM内存中的堆与栈，Java Runtime中存放数据的地方。
JVM中的堆 Java Runtime使用Heap为Object分配内存。所有的对象，无论是何时何地创建的，都保存在Heap中。垃圾回收(Garbage Collection)在Heap上运行，释放不被引用的Object。Heap中生存的Object能在程序的任何地方被引用。
JVM中的栈 Stack memory是为执行的thread分配的，包含一些生存时间短的值和指向Heap中对象的引用。Stack Memory总是LIFO的。当调用一个Method时，Stack Memory会为它分配一块区域，用来存储本地的primitive value和对Object的引用。一旦这个method结束，这块区域将变得不可用，下一次Method调用时又可以使用它。
相比Heap，Stack要小得多。
区别  存储内容：栈存放局部变量以及引用，堆存放所有对象。
 被谁占有：堆被整个程序共享，栈中的对象被所有线程可见；栈属于单个线程，存储的变量只在其所属的线程中可见。
 空间管理：Stack内存满足LIFO，但Heap就复杂多了。Heap被分为Young Generation, Old Generation, Permanent Generation，在它基础上会运行垃圾回收机制。 生存时间：Stack Memory伴随调用它的Method存在、消失，而Heap Memory从程序的开始一直存活到终止。
 体积大小：Stack Memory体积远大于Heap Memory。由于Stack用LIFO调度，它的访问速度也快得多。可以用-Xms或者-Xmx定义Heap的初始大小，用-Xss定义Stack的初始大小。
 异常错误：当Stack满了，Java Runtime会抛出java.lang.StackOverFlowError。当Heap满了，会抛出java.lang.OutOfMemoryError: Java Heap Space Error。
  </description>
    </item>
    
  </channel>
</rss>